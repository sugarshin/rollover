// Generated by CoffeeScript 1.9.0
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['$'], factory);
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory(require('jquery'));
  } else {
    root.ModuleName || (root.ModuleName = factory(root.jQuery));
  }
})(this, function($) {
  "use strict";
  var Rollover;
  Rollover = (function() {
    Rollover.prototype._defaults = {
      strOff: '_off',
      strOn: '_on',
      onlyChild: true,
      over: false
    };

    Rollover.prototype._preload = function() {
      return $('<img />').attr('src', this._srcOn);
    };

    Rollover.prototype._configure = function(el, opts) {
      this.$el = $(el);
      this.opts = $.extend({}, this._defaults, opts);
      if (this.opts.onlyChild) {
        this.$img = this.$el.children('img');
      } else {
        this.$img = this.$el.find('img');
      }
      this._srcOff = this.$img.attr('src');
      return this._srcOn = this._srcOff.replace(this.opts.strOff, this.opts.strOn);
    };

    function Rollover(el, opts) {
      this._configure(el, opts);
      this._preload();
      this.addEvents();
      if (this.get('over')) {
        this.toOver();
      }
    }

    Rollover.prototype.set = function(name, bool) {
      return this.opts[name] = bool;
    };

    Rollover.prototype.get = function(name) {
      return this.opts[name];
    };

    Rollover.prototype.toOver = function() {
      this.set('over', true);
      this.$img.attr('src', this._srcOn);
      return this;
    };

    Rollover.prototype.toNormal = function() {
      this.set('over', false);
      this.$img.attr('src', this._srcOff);
      return this;
    };

    Rollover.prototype.addEvents = function() {
      this.$el.on('mouseenter.rollover', (function(_this) {
        return function() {
          return _this.toOver();
        };
      })(this));
      this.$el.on('mouseleave.rollover', (function(_this) {
        return function() {
          return _this.toNormal();
        };
      })(this));
      return this;
    };

    Rollover.prototype.rmEvents = function() {
      this.$el.off('mouseenter.rollover');
      this.$el.off('mouseleave.rollover');
      return this;
    };

    Rollover.prototype.destroy = function() {
      return this.$el.remove();
    };

    return Rollover;

  })();
});
